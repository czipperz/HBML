#!/bin/perl6
class Property {

has Str $.name;
has Str $.value is rw;

multi BUILD(Str :$parse is copy) {
	if $parse ~~ /  ( <-[\ ]> + ) \=
						( \" [ . <-[\"]> | <-[\\]> . ] + \" |
						<-[\ ]> + ) / {
		BUILD(name => $0, value => $1);
	} else {
		die 'Does not match the pattern to build from';
	}
}

multi BUILD(Str :$!name, Str :$!value) {}

method Str {
	"$.name=$.value";
}

}

class Tag {

has Property @.properties = ();
has Property $.classRef;
has Str $.name;
has Bool $.hasSuper = True;
has Tag $.super;
has Tag @.subs = ();
has Block $.b;
has Block $.a;
has Bool $.hasB = False;
has Bool $.hasA = False;
has Bool $.encapsulated = False;

method startHTML(--> Str) {
	return "<$.name>" if @.properties.elems == 0;
	"<$.name {@.properties[].Str}>";
}
method endHTML(--> Str) {
	"</$.name>";
}

multi method put(Tag $sub) {
	#if $.hasB {
	#	my @list = $.b();
	#	for @list {
	#		@!subs.push($_);
	#	}
	#}
	@!subs.push($sub);
	#if $.hasA {
	#	my @list = $.a();
	#	for @list {
	#		$sub.put($_);
	#	}
	#}
}

multi method put(Property $prop) {
	if $prop.name eqv "class" {
		if $.classRef.WHAT === $.classRef {
			$!classRef = $prop;
			@!properties.push($prop);
		} else {
			my $val = $prop.value;
			$val ~~ s/\" (.*) \"/$0/;
			$.classRef.value ~~ s/\" (.*) \"/\"$0 $val\"/;
		}
		return;
	}
	@!properties.push($prop);
}

method writeSubs(Bool $lastIsText is rw) {
	$lastIsText = False;
	print self.startHTML;
	if @.subs.elems > 0 {
		for @.subs {
			.writeSubs($lastIsText);
		}
	}
	print self.endHTML;
}

method setBefore(Block $b) {
	$!b = $b;
	$!hasB = True;
}
method setAfter(Block $a) {
	$!a = $a;
	$!hasA = True;
}

}

class DoctypeTag is Tag {

has Str $.description;

method config() {
	my $l := $!description;
	$l = 'HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"' if $l eqv "strict";
	$l = 'HTML PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN" "http://www.w3.org/TR/html4/frameset.dtd"' if $l eqv "frame";
	$l = 'HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"' if $l eqv "trans";
}

method startHTML() returns Str {
	"<!DOCTYPE $.description>";
}

method endHTML() returns Str {
	"";
}

}

class TextTag is Tag {

has Str $.text;

method startHTML() returns Str {
	$.text;
}

method endHTML() returns Str {
	"";
}

method writeSubs(Bool $lastIsText is rw) {
	print " " if $lastIsText;
	$lastIsText = True;
	print $.text;
}

}

sub assign(Tag $new, Tag $current is rw) is export {
	$current.put($new);
	$current = $new;
}

sub parseDoctype(Str $doctype --> Tag) is export {
	my $l = DoctypeTag.new(description => $doctype);
	$l.config();
	$l
}

sub parseDiv(Str $name, Str $value, Bool $encapsulated, Tag $current --> Tag) is export {
	Tag.new(name => "div", properties => (Property.new(name => $name, value => "\"$value\"")), super => $current, encapsulated => $encapsulated);
}

sub parseBlock(Str $blockName, Bool $encapsulated, Tag $current --> Tag) is export {
	Tag.new(name => $blockName,	super => $current, encapsulated => $encapsulated);
}

my Tag $doctype;
my Bool $hasDoctype = False;
my Tag $current;
my Bool $inCom = False;
my Str $comStr = "";

multi parseStr(Str $val is copy) is export {
	$val ~~ s/^^ ' '*//;
	if $inCom {
		if $val ~~ /^^ '###' {$comStr}/ {
			$inCom = False;
		} else {
			$current.put(TextTag.new(text => $_));
		}
	} elsif $val ~~ /^^ '###' (\w)?/ {
		$inCom = True;
		$comStr = $0.Str;
	} elsif $val ~~ /^^ '!!' (.*)/ {
		$doctype = parseDoctype $0.Str;
		$hasDoctype = True;
		$current = Tag.new(name => "html", hasSuper => False);
	} else {
		parseOthers $val;
	}
}

multi parseOthers(Str $val is copy, Bool $encapsulated = False) {
	if ($val eqv "") {

	#ESCAPED TEXT
	} elsif $val ~~ /^^ ' '? '\\- ' (.*)/ {
		$current.put(TextTag.new(text => $0.Str));

	#BLOCKS
	} elsif $val ~~ /^^ \@ (\" .*? \") (.*)/ {
		assign Tag.new(name => "a", properties => (Property.new(name => "href", value => $0.Str)), super => $current, encapsulated => $encapsulated), $current;
		parseOthers($current, $1.Str);
	} elsif $val ~~ /^^ \% (<[\  \( \% \# \. \@ \& \< \[ ]> .*)/ {
		assign Tag.new(name => "div", super => $current, encapsulated => $encapsulated), $current;
		parseOthers($0.Str) if $0.Str ~~ /<[\ \% \# \. \@ \& \< \[ ]>/;
		parseOthers($current, $0.Str) if $0.Str ~~ /\(/;
	} elsif $val ~~ /^^ \% (<-[\  \( \% \# \. \@ \& \< \[ ]> +) (.*)/ {
		assign parseBlock($0.Str, $encapsulated, $current), $current;
		parseOthers($current, $1.Str);

	#DIVS
	} elsif $val ~~ /^^ (<[#.]>) [ (<-[\  \% \# \. \@ \& \< \[ ]> +)    |
									 \" .*? \"
								 ] (.*)/ {
		assign parseDiv($0.Str eqv '#' ?? "id" !! "class", $1.Str, $encapsulated, $current), $current;
		parseOthers($current, $2.Str);

	#END OF BLOCK
	} elsif $val ~~ /^^ \} (.*)/ {
		while $current.encapsulated {
			$current .= super;
		}
		$current .= super if $current.hasSuper;
		if $current.name eqv "head" {
			assign Tag.new(name => "body", super => $current), $current;
		}
		parseOthers $0.Str;
	} elsif $val ~~ /^^ ' '+ (.*)/ {
		$current.put(TextTag.new(text => $0.Str));
		while $current.encapsulated {
			$current .= super;
		}
		$current .= super;
	} else {
		$current.put(TextTag.new(text => $val.Str));
	}
}

#Recursively finds properties in the `Str $toParse` and adds them to `$toEdit`.
multi parseOthers(Tag $toEdit, Str $toParse is copy) {
	if ($toParse eqv "") {
		while $current.encapsulated {
			$current .= super;
		}
		$current .= super;
	} elsif $toParse ~~ /^^ ' '+ '\\- ' (.*)/ {
		$current.put(TextTag.new(text => $0.Str));
	} elsif $toParse ~~ /^^ \(\) (.*)/ {
		parseOthers($toEdit, $0);
	} elsif $toParse ~~ /^^ \((.*)\) (.*)/ {
		my $var = $0.Str;
		while $var ~~ s/^^	\s* ( <-[\ ]> + ) \=
							( \" .*? \"   |
							<-[\ ]> + ) \s*// {
			$toEdit.put(Property.new(name => $0.Str, value => $1.Str));
		}
		parseOthers($toEdit, $1.Str);
	} elsif $toParse ~~ /^^ (<[.#]>)	[ \" ( . <-[\"]> | <-[\\]> . ) + \" |
										(<-[\  \% \# \. \@ \& \< \[ ]> + )] (.*)/ {
		$toEdit.put(Property.new(name => ($0.Str eqv '#' ?? "id" !! "class"), value => '"' ~ $1.Str ~ '"'));
		parseOthers($toEdit, $2.Str);
	#loop back
	} elsif ($toParse ~~ /^^ \@	\" [ . <-[\"]> | <-[\\]> . ] + \"/
		  or $toParse ~~ /^^ \% [<[\  \# \. \@ \& \< \[ ]>]/
		  or $toParse ~~ /^^ \% [<-[\  \% \# \. \@ \& \< \[ ]>+]/) {
		parseOthers $toParse, True;
	#Start of block
	} elsif $toParse ~~ /^^ ' {' ' '* (.*)/ {
		parseOthers($0.Str) unless $0.Str eqv "";
	} elsif $toParse ~~ /^^ ' ' (.*)/ {
		$toEdit.put(TextTag.new(text => $0.Str));
		while $current.encapsulated {
			$current .= super;
		}
		$current .= super;
	}
}

sub finWrite() is export {
	my Tag $asdf = $current;
	while ($asdf.hasSuper) {
		$asdf .= super;
	}
	print $doctype.startHTML if $hasDoctype;
	my Bool $last = False;
	$asdf.writeSubs($last);
}
#!/bin/perl6
use v6;
use lib '.';

die "Needs a filename to execute" if @*ARGS.elems == 0;
die "Only wants a filename to execute" if @*ARGS.elems > 1;
my $fileH = open @*ARGS[0];

for $fileH.lines {
	parseStr($_);
}

finWrite();
